{"version":3,"sources":["Types/Tipes.ts","Styles/globalStyle.js","VariablesAndFunc/Functions.ts","components/Content/Content.tsx","components/hooks/useParamsUrl/useParamsUrl.tsx","App.tsx","reportWebVitals.ts","Styles/Theme.ts","Redux/reducers/bitcoinReducer.ts","API/API.ts","Redux/Saga/Saga.ts","Redux/Saga/rootSaga.ts","Redux/redux.ts","index.tsx"],"names":["ActionType","GlobalStyles","createGlobalStyle","useAppSelector","useSelector","Content","children","result","state","counterSlice","dispatch","useDispatch","search","window","location","substr","current","split","forEach","item","array","length","useParamsUrl","timestamp","name","age","style","margin","onClick","payload","type","SEND_META","width","marginTop","message","AppDivStyle","styled","div","ContentSectionStyle","section","App","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ThemeLight","color","type1","type2","type3","size","type4","createSlice","initialState","reducers","getResult","action","actions","Api","axios","create","meta","Promise","resolve","reject","setTimeout","data","sendMeta","todoSaga","params","call","put","all","takeEvery","rootSaga","fork","sagaMiddleware","createSagaMiddleware","store","configureStore","reducer","middleware","MiddlewareArray","concat","logger","run","ReactDOM","render","theme","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cc6b2c9b.chunk.js","sourcesContent":["\r\nexport enum ActionType {\r\n  SEND_META = \"SEND_META\"\r\n}\r\n\r\nexport interface ParametersType {\r\n  name: string, \r\n  age: string, \r\n  timestamp: string\r\n}\r\nexport interface SendMetaType {\r\n  type: ActionType.SEND_META, \r\n  payload: ParametersType\r\n}\r\n\r\n\r\nexport const SendMetaAC = (payload: ParametersType): SendMetaType => ({type: ActionType.SEND_META, payload})\r\n","import { createGlobalStyle } from \"styled-components\";\r\n\r\nconst GlobalStyles = createGlobalStyle`\r\nbody {\r\n  \r\n  margin: 0;\r\n  font-family: -apple-system, BlinkMacSystemFont,  \"DINPro\", 'Segoe UI', 'Roboto', 'Oxygen',\r\n    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\r\n    sans-serif;\r\n  -webkit-font-smoothing: antialiased;\r\n  -moz-osx-font-smoothing: grayscale;\r\n}\r\n\r\ncode {\r\n  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',\r\n    monospace;\r\n}\r\n\r\na {\r\n    text-decoration: none;\r\n}\r\n\r\n`\r\n\r\nexport default GlobalStyles","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux'\r\nimport { AppDispatch, RootState } from '../Redux/redux'\r\n\r\n\r\n\r\nexport function setCookie(name: any, value: any, options: any = {}) {\r\n\r\n    options = {\r\n      path: '/',\r\n      ...options\r\n    };\r\n  \r\n    if (options.expires instanceof Date) {\r\n      options.expires = options.expires.toUTCString();\r\n    }\r\n  \r\n    let updatedCookie = encodeURIComponent(name) + \"=\" + encodeURIComponent(value);\r\n  \r\n    for (let optionKey in options) {\r\n      updatedCookie += \"; \" + optionKey;\r\n      let optionValue = options[optionKey];\r\n      if (optionValue !== true) {\r\n        updatedCookie += \"=\" + optionValue;\r\n      }\r\n    }\r\n  \r\n    document.cookie = updatedCookie;\r\n  }\r\n  \r\n\r\n\r\n\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>()\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector","import { Alert, Col, Row } from 'antd'\r\nimport React, { FC, useEffect, useLayoutEffect, useRef } from 'react'\r\nimport { useState } from 'react'\r\nimport { SendMetaAC } from '../../Types/Tipes'\r\nimport { useAppDispatch, useAppSelector } from '../../VariablesAndFunc/Functions'\r\nimport useParamsUrl from '../hooks/useParamsUrl/useParamsUrl'\r\nimport { Button } from 'antd';\r\n\r\n\r\ntype Props = {\r\n\r\n}\r\n\r\n\r\nconst Content: FC<Props> = ({ children }) => {\r\n\r\n  let result = useAppSelector((state) => state.counterSlice.result )\r\n  let dispatch = useAppDispatch()\r\n  let { timestamp, name, age } = useParamsUrl()\r\n   \r\n  return <div style={{margin: \"40px\"}}>\r\n    <div>Name:{name ? name : \"undefined\"}</div>\r\n    <div>Age:{age ? age : \"undefined\"}</div>\r\n    <div>Timestamp:{timestamp ? timestamp : \"undefined\"}</div>\r\n\r\n    {(!name || !age || !timestamp) && <div>Вид строки URL должен быть вида http://localhost:3000/?name=example&age=29&timestamp=1624298113</div>}\r\n\r\n    {name && age && timestamp && <Button onClick={() => {\r\n      if (timestamp && name && age) {\r\n        dispatch(SendMetaAC({ timestamp, name, age }))\r\n      }\r\n    }} type=\"primary\">Send Meta</Button>}\r\n\r\n    {result === \"success\" && <Alert style={{width: \"300px\", marginTop: \"20px\"}} message=\"Request seccess\" type=\"success\" />}\r\n  </div>\r\n}\r\n\r\nexport default Content","\r\nimport React from 'react';\r\n\r\n\r\n\r\nexport default function useParamsUrl () {\r\n  \r\n    let search = window.location.search.substr(1)\r\n    let current = {} as any\r\n    let s  = search.split('&')\r\n    search.split('&').forEach((item) => {\r\n        let array = item.split(\"=\")\r\n        if(array.length === 1) {\r\n            return\r\n        }\r\n        current = {...current, [array[0]]: array[1]}\r\n    })\r\n\r\n    return current\r\n  }\r\n\r\n\r\n","import React from 'react';\r\nimport styled from \"styled-components\"\r\nimport {\r\n  BrowserRouter,\r\n  Switch,\r\n  Route\r\n} from \"react-router-dom\";\r\nimport Content from './components/Content/Content';\r\n\r\n\r\nconst AppDivStyle = styled.div`\r\n    display: grid;\r\n    grid-template-areas: \"content \";\r\n    width: 100%;\r\n    height: 100%;\r\n    grid-template-columns: 1fr;\r\n    grid-template-rows: 1fr;\r\n\r\n`\r\n\r\nconst ContentSectionStyle = styled.section`\r\n  grid-area: content;\r\n`\r\n\r\nconst themes = {\r\n  light: {\r\n    foreground: \"#000000\",\r\n    background: \"#eeeeee\"\r\n  },\r\n  dark: {\r\n    foreground: \"#ffffff\",\r\n    background: \"#222222\"\r\n  }\r\n};\r\n\r\nexport const ThemeContext = React.createContext(themes);\r\n\r\n\r\n\r\nfunction App() {\r\n\r\n  return (\r\n    <BrowserRouter>\r\n      <Switch>\r\n        <AppDivStyle >\r\n          <ContentSectionStyle>\r\n             <Route path='/' component={Content} /> \r\n          </ContentSectionStyle>\r\n        </AppDivStyle>\r\n      </Switch>\r\n    </BrowserRouter>\r\n  );\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","let ThemeLight = {\r\n  color: {\r\n    type1: \"#D0D1D2\" as \"#D0D1D2\",\r\n    type2: \"#11263C\" as \"#11263C\",\r\n    type3: \"#F2F2F7\" as \"#F2F2F7\"\r\n  },\r\n  size: {\r\n    type1: \"12px\" as \"12px\",\r\n    type2: \"14px\" as \"14px\",\r\n    type3: \"16px\" as \"16px\",\r\n    type4: \"18px\" as \"18px\",\r\n  }\r\n};\r\n\r\ndeclare module \"styled-components\" {\r\n  export interface DefaultTheme extends ThemeLightType {}\r\n}\r\n\r\nexport type ThemeLightType = typeof ThemeLight\r\n\r\nexport default ThemeLight;\r\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\r\n\r\nimport type { RootState } from '../redux'\r\n\r\ninterface list {\r\n  userId: number,\r\n  id: number,\r\n  title: string,\r\n  body:  string\r\n}\r\n// Define the initial state using that type\r\nconst initialState = {\r\n  result: null as null | string\r\n}\r\n\r\n\r\n\r\n// Define a type for the slice state\r\nexport type BitcoinStateType = typeof initialState\r\n\r\nexport const counterSlice = createSlice({\r\n  name: 'counter',\r\n  // `createSlice` will infer the state type from the `initialState` argument\r\n  initialState,\r\n  reducers: {\r\n     getResult: (state, action: PayloadAction<string>) => {\r\n       state.result = action.payload\r\n     },\r\n   \r\n    \r\n  },\r\n  \r\n})\r\n\r\nexport const {getResult} = counterSlice.actions\r\n\r\n// Other code such as selectors can use the imported `RootState` type\r\n// export const selectCount = (state: RootState) => state.counterSlice.value\r\n\r\nexport default counterSlice.reducer","import axios from \"axios\";\r\nimport { ParametersType } from \"../Types/Tipes\";\r\n\r\nlet instance = axios.create({\r\n  // baseURL: '',\r\n  // headers: {\r\n  //     \"Content-Type\": 'application/json',\r\n  //     \"accept\": \"application/json\",\r\n  //     \"Authorization\": `Bearer ${accessToken}`\r\n  // }\r\n});\r\n\r\nexport const Api = {\r\n  setMeta(meta: ParametersType) {\r\n    // return  instance.put(\"http://localhost:3000\", JSON.stringify(meta));\r\n    return new Promise<{data: string}>((resolve, reject) => {\r\n        setTimeout(() => {\r\n           return  resolve({data: \"success\"})\r\n        }, 1000)\r\n    })\r\n  },\r\n};\r\n","import { all, put, takeEvery, call } from \"redux-saga/effects\";\r\nimport { Api } from \"../../API/API\";\r\nimport { ActionType, SendMetaType } from \"../../Types/Tipes\";\r\nimport { getResult } from \"../reducers/bitcoinReducer\";\r\n\r\nfunction* sendMeta(params: SendMetaType) {\r\n  let {payload} = params\r\n  try {\r\n     const result: {data: string} = yield call(Api.setMeta, payload)\r\n     yield put({type: getResult.type, payload: result.data}) \r\n  } catch (e) {}\r\n}\r\n\r\nfunction* todoSaga() {\r\n  yield all([takeEvery(ActionType.SEND_META, sendMeta)]);\r\n}\r\n\r\nexport default todoSaga;\r\n","import { all, fork } from \"redux-saga/effects\";\r\nimport todoSaga from \"./Saga\";\r\n\r\nexport function* rootSaga() {\r\n  yield all([fork(todoSaga)]);\r\n}","import { configureStore, MiddlewareArray } from '@reduxjs/toolkit'\r\nimport counterSlice  from './reducers/bitcoinReducer'\r\nimport createSagaMiddleware from \"redux-saga\";\r\nimport logger from 'redux-logger'\r\nimport { rootSaga } from './Saga/rootSaga';\r\n\r\n\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    counterSlice,\r\n  },\r\n  middleware: new MiddlewareArray().concat( sagaMiddleware, logger),\r\n})\r\n\r\n\r\nsagaMiddleware.run(rootSaga)\r\n\r\n// Infer the `RootState` and `AppDispatch` types from the store itself\r\nexport type RootState = ReturnType<typeof store.getState>\r\n// Inferred type: {posts: PostsState, comments: CommentsState, users: UsersState}\r\nexport type AppDispatch = typeof store.dispatch\r\n\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport GlobalStyles from \"./Styles/globalStyle.js\"\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport ThemeLight from \"./Styles/Theme\"\r\nimport { ThemeProvider } from 'styled-components';\r\nimport 'antd/dist/antd.css';\r\nimport { store } from './Redux/redux';\r\n\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <ThemeProvider theme={ThemeLight}>\r\n      <React.StrictMode>\r\n        <GlobalStyles />\r\n        <App />\r\n      </React.StrictMode>\r\n    </ThemeProvider>\r\n  </Provider>\r\n\r\n  ,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n\r\n\r\n\r\n\r\n\r\nreportWebVitals();\r\n"],"sourceRoot":""}